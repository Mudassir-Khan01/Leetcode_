/*
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // global declaration
    int index=0;
    int n=0;
    public TreeNode recoverFromPreorder(String traversal) {
        n=traversal.length();
        // we start from depth 0
        return recur(traversal, 0);
    }

    private TreeNode recur(String traversal, int depth){
        // base condition that index is greater than length then return wnull
        if(index>=n)
        return null;
        // count dash
        int count=0;
        int tempI=index;
        // if thats not a digit means a dash so count++
        // temp is to temporary traverse the string to get no. of dash
        while(tempI<n && !Character.isDigit(traversal.charAt(tempI))){
            count++;
            tempI++;
        }
        // if count of dash and depth doesnt become equak we return null
        if(count!=depth)
        return null;

        // find the number
        index=tempI;
        int val=0;
        while(index<n && Character.isDigit(traversal.charAt(index))){
            // convert string to number
            val=val*10+(traversal.charAt(index)-'0');
            index++;
        }

        // Now put it in node
        TreeNode node=new TreeNode(val);
        node.left=recur(traversal , depth+1);
        node.right=recur(traversal, depth+1);
        return node;
    }
}
