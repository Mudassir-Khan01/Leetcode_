class Solution {
    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {
        // Create an adjacency list representation of the graph
        ArrayList<Integer>[] graph = new ArrayList[amount.length];
        for (int i = 0; i < graph.length; i++) 
            graph[i] = new ArrayList<>();
        
        // Construct the undirected graph from edges
        for (int[] edge : edges) {
            graph[edge[0]].add(edge[1]);
            graph[edge[1]].add(edge[0]);
        }

        // Array to store the timestamp when Bob reaches each node
        int[] bobPath = new int[amount.length];
        Arrays.fill(bobPath, -1); // Initialize with -1 (unvisited)
        
        // List to store Bob's path from his starting node to node 0
        ArrayList<Integer> path = new ArrayList<>();
        fillBobPath(bob, -1, path, graph); 
        
        // Store the timestamp (index) when Bob reaches each node
        for (int i = 0; i < path.size(); i++) {
            bobPath[path.get(i)] = i;
        }

        // Start DFS for Alice to calculate max score
        return getAliceMaxScore(0, -1, 0, bobPath, graph, 0, amount);
    }

    // DFS function to find the path Bob takes from 'bob' to node 0
    private boolean fillBobPath(int node, int parentNode, ArrayList<Integer> path, ArrayList<Integer>[] graph) {
        if (node == 0) return true; // Reached node 0, path is complete
        
        for (int neighborNode : graph[node]) {
            if (neighborNode != parentNode) { // Avoid revisiting the parent node
                path.add(node); // Add current node to path
                if (fillBobPath(neighborNode, node, path, graph)) return true; // Continue DFS
                path.remove(path.size() - 1); // Backtrack if path is not found
            }
        }
        return false; // Return false if no path to node 0 is found
    }

    // DFS function to calculate the max profit Alice can collect
    private int getAliceMaxScore(int node, int parentNode, int currScore, int[] bobPath, ArrayList<Integer>[] graph, int timestamp, int[] amount) {
        // If Bob has not reached the node or reaches later than Alice, Alice takes full amount
        if (bobPath[node] == -1 || bobPath[node] > timestamp) {
            currScore += amount[node];
        }
        // If Bob and Alice reach the node at the same time, split the amount
        else if (bobPath[node] == timestamp) {
            currScore += amount[node] / 2;
        }

        // If it's a leaf node (excluding node 0), return the collected score
        if (graph[node].size() == 1 && node != 0) return currScore;

        int maxScore = Integer.MIN_VALUE;
        
        // Explore all neighboring nodes (DFS traversal)
        for (int neighborNode : graph[node]) {
            if (neighborNode != parentNode) { // Avoid going back to the parent node
                maxScore = Math.max(maxScore, getAliceMaxScore(neighborNode, node, currScore, bobPath, graph, timestamp + 1, amount));
            }
        }

        return maxScore; // Return the maximum score Alice can achieve
    }
}
