class Solution {
    String result;
    int count;
    public String getHappyString(int n, int k) {
        result="";
        count=0;
        // start from empty string and count 0
        backtrack(n,k, new StringBuilder(""));

        return result;
    }
    private boolean backtrack(int n , int k , StringBuilder sb){
        // base condn
        // if length equals te given length then increase count as we found string of that length and if count equal k
        //then we found the string at kth position
        if(sb.length()==n){
            count++;
            if(count==k){
                result=sb.toString();
                return true;
            }
            return false;
        }
        // Otherwise start building the string
        for(char ch='a'; ch<='c';ch++){
            int len=sb.length();
            // if adjacent char is same then thats not a happy string so we continue
            if(len>0 &&  sb.charAt(len-1)==ch){
                continue;
            }
            // otherwise append it
            sb.append(ch);
            // call fn
            if(backtrack(n,k,sb)){
                return true;
            }
            // backtrack delete the last character
            sb.deleteCharAt(sb.length()-1);
        }
        return false;
    }
}
