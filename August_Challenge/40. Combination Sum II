class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans=new ArrayList<>();
        List<Integer> temp=new ArrayList<>();
        Arrays.sort(candidates); //sort it so as to get duplicate no. together
        helper(target, 0, candidates, ans, temp);// backtracking
        return ans;
    }

    private void helper(int target, int ind, int[] candidates , List<List<Integer>> ans, List<Integer> temp){
        if(target<0)
        return;
        
        if(target==0){
        ans.add(new ArrayList<>(temp));
        return;
        }
    for(int i=ind;i<candidates.length;i++){
        if(i>ind && candidates[i]==candidates[i-1]){ // duplicates
            continue;
        }
        if(candidates[i]>target) // if that increases than target
        break;
    
    temp.add(candidates[i]); // (take it)
    helper(target-candidates[i], i+1, candidates, ans,temp);
    temp.removeLast();//(dont take it)
    }
}
}
