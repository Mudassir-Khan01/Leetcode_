class Solution {
    int[][] grid;
    int[][] dir = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    
    public int minDays(int[][] grid) {
        this.grid = grid;

        // If already disconnected (multiple islands or no island)
        if (isMultipleIslands()) {
            return 0;
        }

        // Try removing each land cell to see if it disconnects the grid
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 1) {
                    grid[i][j] = 0;  // Remove island
                    if (isMultipleIslands()) {
                        return 1;
                    }
                    grid[i][j] = 1;  // Restore the land cell
                }
            }
        }
        
        // If no single cell can disconnect the grid, return 2
        return 2;
    }
    
    private boolean isMultipleIslands() {
        boolean isIslandFound = false;
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (!visited[i][j] && grid[i][j] == 1) {
                    if (isIslandFound) {
                        return true;  // Found multiple islands
                    }
                    isIslandFound = true;
                    dfs(i, j, visited);
                }
            }
        }
        
        // If no island is found, it's considered disconnected
        return !isIslandFound;
    }
    
    private void dfs(int row, int col, boolean[][] visited) {
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || visited[row][col] || grid[row][col] == 0) {
            return;
        }
        
        visited[row][col] = true;
        for (int i = 0; i < 4; i++) {
            dfs(row + dir[i][0], col + dir[i][1], visited);
        }
    }
}
