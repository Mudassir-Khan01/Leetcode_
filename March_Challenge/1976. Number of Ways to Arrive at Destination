import java.util.*;

class Solution {
    public int countPaths(int n, int[][] roads) {
        int MOD = 1_000_000_007;
        
        // Build the graph as an adjacency list
        List<int[]>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) graph[i] = new ArrayList<>();
        
        for (int[] road : roads) {
            int u = road[0], v = road[1], time = road[2];
            graph[u].add(new int[]{v, time});
            graph[v].add(new int[]{u, time});
        }

        // Distance array initialized to infinity
        long[] dist = new long[n];
        Arrays.fill(dist, Long.MAX_VALUE);
        dist[0] = 0;

        // Ways array counts the number of ways to reach each node
        int[] ways = new int[n];
        ways[0] = 1;

        // Min-heap priority queue storing [currentTime, node]
        PriorityQueue<long[]> pq = new PriorityQueue<>((a, b) -> Long.compare(a[0], b[0]));
        pq.offer(new long[]{0, 0}); // Starting from node 0 with time 0

        while (!pq.isEmpty()) {
            long[] curr = pq.poll();
            long time = curr[0];
            int node = (int) curr[1];

            // If the current time exceeds the shortest time for this node, skip
            if (time > dist[node]) continue;

            // Explore neighbors
            for (int[] neighbor : graph[node]) {
                int nextNode = neighbor[0];
                long travelTime = neighbor[1];

                // If a shorter path is found to the next node
                if (time + travelTime < dist[nextNode]) {
                    dist[nextNode] = time + travelTime;
                    ways[nextNode] = ways[node]; // Inherit ways from current node
                    pq.offer(new long[]{dist[nextNode], nextNode});
                } 
                // If an equal shortest path is found, add the number of ways
                else if (time + travelTime == dist[nextNode]) {
                    ways[nextNode] = (ways[nextNode] + ways[node]) % MOD;
                }
            }
        }

        // Return the number of ways to reach node n-1
        return ways[n - 1];
    }
}
