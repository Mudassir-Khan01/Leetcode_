class Solution {
    public int findKthNumber(int n, int k) {
        int curr=1;  // we start from 1
        k--; // since we have selected 1 so k--
        while(k>0){
            // count how many numbers exist in the subtree 
            //count fn  counts the numbers between two prefixes curr and curr+1
            int steps=countSteps(n , curr, curr+1);
            // if steps are less than or equal to k , we skip this prefix's subtree 
            if(steps<=k){
                // move to the next prefix and decrease k by the number of steps we skip
                curr++;
                k-=steps;
            }else{
                // move to the next level of tree and decrement k by 1
                curr*=10;
                k--;
            }
        }
        return curr;
    }
    // count how many numbers exist between prefix1 and prefix2
    private int countSteps(int n, long prefix1, long prefix2){
        int steps=0;
        while(prefix1<=n){
            steps+=Math.min(n+1, prefix2)-prefix1;  // this ensure count doesnt exceed  n 
            prefix1*=10; // multiple of 10 to move to the next level
            prefix2*=10;
        }
        return steps;
    }
}
