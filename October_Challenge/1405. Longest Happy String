class Solution {
    public String longestDiverseString(int a, int b, int c) {
        // Create a Pq storing character and their count
        // count in decreasing order
        PriorityQueue<int[]> pq=new PriorityQueue<>((x,y)->y[0]-x[0]);
        // now put those count and character into the Pq
        if(a>0) pq.offer(new int[]{a,'a'});
        if(b>0) pq.offer(new int[]{b,'b'});
        if(c>0) pq.offer(new int[]{c,'c'});

        //create a StringBuilder to store result
        StringBuilder result=new StringBuilder();

        // while all character arent used
        while(!pq.isEmpty()){
            // first get the largest one
            int [] first=pq.poll();
            // check if last two chacater are the same
            if(result.length()>=2 && result.charAt(result.length()-1)==first[1] && result.charAt(result.length()-2)==first[1] ){
                //if pq is empty the break
                if(pq.isEmpty()) break;

                //else pick the second character and append
                int []second=pq.poll();
                result.append((char) second[1]);
                // decrese the count of seconf largest character
                second[0]--;

                // now just put back second into the pq
                if(second[0]>0) pq.offer(second);

                // and also put first
                pq.offer(first);
            }else{
                // if last 2 char arent the same the just append first
                result.append((char) first[1]);
                first[0]--;

                // again offer first is count is greater than 0
                if(first[0]>0) pq.offer(first);
            }
        }
        return result.toString();
    }
}
