class Solution {
    public int minimumMountainRemovals(int[] nums) { // 2 Method
        int n=nums.length;
        int lis[]=new int[n]; // longest increasing subsequence
        int lds[]=new int[n]; // longest decreasing subsequence 
        Arrays.fill(lis,1);  
        Arrays.fill(lds,1);

        // calculating LIS - no. of increasing element so far 
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[i]>nums[j]){
                    lis[i]=Math.max(lis[i], lis[j]+1);
                }
            }
        }
        // calculating LDS - no. of decreasing element so far
        for(int i=n-1;i>=0;i--){
            for(int j=n-1;j>i;j--){
                if(nums[i]>nums[j]){
                    lds[i]=Math.max(lds[i],lds[j]+1);
                }
            }
        }
        // lis+lds-1 gives the length of mountain array
        // final ans will be n-max
        // calculating length of the mountain array
        int max=0;
        for(int i=0;i<n;i++){
            // dont consider 1
            if(lis[i]>1 && lds[i]>1)
            max=Math.max(max, lis[i]+lds[i]-1);
        }
        return n-max;
    }
}
