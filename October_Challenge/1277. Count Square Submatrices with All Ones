class Solution {
    public int countSquares(int[][] matrix) {
        int ans=0; // to store the count
        // Integer dp to skip filling it with -1
        Integer[][]dp=new Integer[matrix.length][matrix[0].length];
        // traverse for each cell 
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                ans+=solve(i,j,matrix,dp);
            }
        }
        return ans;
}

    private int solve(int i, int j, int[][]grid, Integer[][]dp){
        // base cases if we take left diagonal and up
        if (i < 0 || j < 0) {
            return 0;
        }
        // this if we take right , below and diagonal
        // if(i>=grid.length || j>=grid[0].length){
        //     return 0;
        // }
        // if thats a 0
        if(grid[i][j]==0){
            return 0;
        }
        // if not null then return dp[i][j]
        if(dp[i][j]!=null){
            return dp[i][j];
        }
        // else go to its right , diagonal and left 
        int right=solve(i,j-1,grid,dp);
        int diagonal=solve(i-1,j-1,grid,dp);
        int below=solve(i-1,j,grid,dp);
        //in dp store min(right , left , diaginal) coz its a square matrix and +1 for itself
        return dp[i][j]=1+Math.min(right, Math.min(diagonal, below));
    }
}
