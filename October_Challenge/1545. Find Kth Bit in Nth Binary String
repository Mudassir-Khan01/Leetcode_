class Solution {
    public char findKthBit(int n, int k) {
        int len=(int) Math.pow(2,n)-1;
        return recur(len,k);
    }
    public char recur(int len, int k){
        //base case
        if(len==1){
            return '0';
        }
        // get the half
        int half=len/2;
        //get the middle (1 based indexing)
        int middle=half+1;
        // Now 3 cases
        if(k==middle){
            // its the middle one so it always will be 1
            return '1';
        }else if(k<middle){
            //left so in this case go back call recur and reduce the len to half
            return recur(half,k);
        }else{
            // right
            //so find its equivalent left and then go back
            char ans=recur(half, len-k+1); // len-k+1 will give its index from left
            return (ans=='0')?'1':'0'; // we need to invert it as well so if 0 then 1 or viceversa
        }
    }
}
