class Solution {
    public List<String> stringMatching(String[] words) {
        // we may use build in fn contains()
        // but here we will custom compare
        List<String> ans=new ArrayList<>();
        int n=words.length;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i==j || words[i].length() > words[j].length())
                continue;

                if(isSubstring(words[i], words[j])){
                    ans.add(words[i]);
                    break;  // coz we dont need to further check for the string
                }
            }
        }
        return ans;
    }
    private boolean isSubstring(String sub , String word){
        int n=word.length();
        int m=sub.length();
        // traverse the word
        for(int j=0;j<n;j++){
            // init isMatch with true
            boolean isMatch=true;
            // k to point a word in word and i points in sub
            int k=j;
            int i=0;
            while(i<m){
                // if in case it doesnt satisfy them make isMatch false and break
                if(k>=word.length() || word.charAt(k)!=sub.charAt(i)){
                    isMatch=false;
                    break;
                }
                // else just move both pointer 
                i++;
                k++;
            }
            // if in case it reaches end of m then it remains true
            if(isMatch)
            return true;
        }
        return false;
    }
    
}
