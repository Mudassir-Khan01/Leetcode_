class Solution {
    int[][] dir={{-1,0},{0,1},{1,0},{0,-1}};
    public int findMaxFish(int[][] grid) {
        // Both solution dfs and bfs
        int n=grid.length;
        int m=grid[0].length;
        int ans=0;
        boolean [][] visited=new boolean[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]>0 && !visited[i][j]){
                    ans=Math.max(ans, dfs(grid,i,j,visited));
                }
            }
        }
        return ans;
    }
    // dfs call
    private int dfs(int [][] grid, int row, int col, boolean [][] visited){
        // edge or false cases return 0
        if(row<0|| row>=grid.length || col<0 || col>=grid[0].length|| visited[row][col]|| grid[row][col]==0){
            return 0;
        }
        // if satsifies all condition then make it visited and get its value
        visited[row][col]=true;
        int fish=grid[row][col];
        // travel its neighbours and sum up those values
        for(int i=0;i<4;i++){
            fish+=dfs(grid, row+dir[i][0], col+dir[i][1], visited);
        }
        return fish;
    }
}
