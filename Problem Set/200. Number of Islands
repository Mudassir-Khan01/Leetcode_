class Solution {
    int[][] dir={{-1,0},{0,1},{1,0},{0,-1}};  //up, right , dowm , left
    public int numIslands(char[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        boolean [][]visited=new boolean[m][n];
        int count=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1'&& !visited[i][j]){ //if its 1 and not visited then call dfs
                    dfs(grid, i,j,visited);
                    count++; //increase count
                }
            }
        }
        return count;
    }
    private void dfs(char[][]grid, int row, int col, boolean[][]visited){
        if(row<0 || row>=grid.length || col<0 || col>=grid[0].length || visited[row][col]|| grid[row][col]=='0') //edge cases
        return;

        visited[row][col]=true;
        for(int i=0;i<4;i++){
            dfs(grid, row+dir[i][0], col+dir[i][1], visited);
        }
    }
}
