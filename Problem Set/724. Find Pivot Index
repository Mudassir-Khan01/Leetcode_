class Solution {
    public int pivotIndex(int[] nums) {
        // int n=nums.length;
        // int left[]=new int[n]; //store left sum array
        // int right[]=new int[n]; // store right sum array
        // left[0]=nums[0]; //store firstmost element prefix sum left
        // for(int i=1;i<n;i++){
        // left[i]=nums[i]+left[i-1]; //current element in nums + prev element in left
        // array
        // }
        // right[n-1]=nums[n-1]; // store last most element prefix sum right
        // for(int i=n-2;i>=0;i--){
        // right[i]=nums[i]+right[i+1];
        // }

        // for(int i=0;i<n;i++){
        // if((left[i]-right[i])==0) // if value matches we got the result
        // return i;
        // }
        // return -1;

        int n = nums.length;
        int totalSum = 0, leftSum = 0;
        
        // Calculate total sum of the array
        for (int num : nums) {
            totalSum += num;
        }

        // Find pivot index
        for (int i = 0; i < nums.length; i++) {
            // If leftSum is equal to right sum, return index
            if (leftSum == (totalSum - leftSum - nums[i])) {
                return i;
            }
            // Update leftSum
            leftSum += nums[i];
        }

        return -1; // If no pivot index is found
    }
}
