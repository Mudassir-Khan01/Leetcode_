class Solution {
        int [][]grid1;
        int [][]grid2;
        boolean subIsland;
        int[][] dir={{-1,0},{0,1},{1,0},{0,-1}};  //up, right , dowm , left
    public int countSubIslands(int[][] grid1, int[][] grid2) {
        this.grid1=grid1;
        this.grid2=grid2;
        int m=grid1.length;
        int n=grid1[0].length;
        boolean [][] visited=new boolean[m][n];  //to keep track of the cell visited
        int ans=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid2[i][j]==1 && !visited[i][j]){  //if grid2 cell is 1 and is not visited then make subIskand=true and call dfs
                    subIsland=true;
                    dfs(i,j,visited);
                    if(subIsland)   // if it stays true then increase count
                    ans++;
                }
            }
        }
        return ans;
    }
    private void dfs(int row, int col, boolean [][] visited){
        if(row<0 || row>=grid1.length || col<0 || col>=grid1[0].length || visited[row][col] || grid2[row][col]==0)  //edge cases
        return;

        visited[row][col]=true;

        if(grid1[row][col]==0) //if in case corresponding grid1 is 0 then make subIsland false
        subIsland=false;

        for(int i=0;i<4;i++){  //simple 4 directions
            dfs(row+dir[i][0] , col+dir[i][1] , visited);
        }
    }
}


