class Solution {
    public int slidingPuzzle(int[][] board) {
        // Directions for possible swaps based on the position of '0' on the flattened board
        // Each index represents the position of '0' and the array contains the possible indices it can move to
        int[][] dir = {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        
        // Target string representing the solved state of the board
        String target = "123450";
        
        // Set to track visited board configurations to avoid reprocessing
        Set<String> vis = new HashSet<>();
        
        // Queue for BFS
        Queue<String> q = new LinkedList<>();
        
        // Convert the 2D board to a single string for easier manipulation
        String start = "";
        for (int[] row : board) {
            for (int col : row) {
                start += col;
            }
        }

        // Add the initial configuration to the queue and mark it as visited
        q.offer(start);
        vis.add(start);
        
        // Initialize steps to count the number of moves
        int step = 0;

        // Perform BFS
        while (!q.isEmpty()) {
            int size = q.size(); // Number of states to process at the current depth (step)
            while (size-- > 0) {
                String current = q.poll(); // Get the current board configuration
                
                // Check if the current configuration matches the target
                if (current.equals(target)) return step;

                // Find the position of '0' in the current configuration
                int zero = current.indexOf('0');

                // Generate all possible moves by swapping '0' with adjacent tiles
                for (int move : dir[zero]) {
                    StringBuilder next = new StringBuilder(current);
                    
                    // Perform the swap between '0' and the adjacent tile
                    char temp = next.charAt(zero);
                    next.setCharAt(zero, next.charAt(move));
                    next.setCharAt(move, temp);

                    // If this configuration has not been visited, add it to the queue and mark it as visited
                    if (!vis.contains(next.toString())) {
                        vis.add(next.toString());
                        q.offer(next.toString());
                    }
                }
            }
            // Increment the step count after processing all configurations at the current depth
            step++;
        }
        
        // Return -1 if the target configuration is not reachable
        return -1;
    }
}
