/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        // base case
        if(root == null){
            return ans;
        }
        // create a queue for bfs
        Queue<TreeNode> queue=new LinkedList<>();
        // add the root
        queue.add(root);
        // now traverse the queue
        while(!queue.isEmpty()){
            // TO ITERATE THAT SIZE SO WE NEED TO GET THE SIZE
            int size=queue.size(); 
            int max=Integer.MIN_VALUE;
            //traverse a particular level
            for(int i=0;i<size;i++){
                // get current node
                TreeNode curr= queue.remove();
                // check its left and right node
                if(curr.left!=null) queue.add(curr.left);
                if(curr.right!=null) queue.add(curr.right);
                // update the max
                max=Math.max(max, curr.val);
            }
            // got the maximum at a level now save it in list
            ans.add(max);
        }
        return ans;
    }
}
