class Solution {
    static int mod = (int) (Math.pow(10, 9) + 7);
    public static int findTargetSumWays(int[] nums, int target) {
        int n=nums.length;

        int totalsum=0;
        for(int i=0;i<n;i++){
            totalsum+=nums[i];
        }
        if(totalsum-target<0||(totalsum-target)%2==1)
        return 0;

        return findWays(nums,(totalsum-target)/2);
    }
   static int findWays(int[] num, int tar) {
        int n = num.length;

        // Create an array to store results of subproblems for the current element
        int prev[] = new int[tar + 1];

        // Initialize the prev array for the first element of the array
        if (num[0] == 0)
            prev[0] = 2; // 2 cases - pick and not pick
        else
            prev[0] = 1; // 1 case - not pick

        if (num[0] != 0 && num[0] <= tar)
            prev[num[0]] = 1; // 1 case - pick

        // Fill the prev array using dynamic programming
        for (int ind = 1; ind < n; ind++) {
            int cur[] = new int[tar + 1];
            for (int target = 0; target <= tar; target++) {
                int notTaken = prev[target];

                int taken = 0;
                if (num[ind] <= target)
                    taken = prev[target - num[ind]];

                cur[target] = (notTaken + taken) % mod;
            }
            prev = cur;
        }

        return prev[tar];
    }
}
