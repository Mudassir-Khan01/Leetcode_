class Solution {
    public int maxTwoEvents(int[][] events) {
        // Pq arranged in increasing order of end time 
        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)-> a[1]-b[1]);
        // sort array in increasing order of start time
        Arrays.sort(events,(a,b)->a[0]-b[0]);
        int prevMax=0;
        int result=0;
        for(int event[]: events){
            // find prevMax
            // go through pq and only if its not empty and the end time is less than new event start time
            while(!pq.isEmpty() && pq.peek()[1]<event[0]){
                // get the max
                prevMax=Math.max(prevMax, pq.peek()[2]);
                pq.poll();
            }
            // get the result ie prevMax+ event's value
            result=Math.max(result, prevMax+event[2]);
            // offer the new event
            pq.offer(event);
        }
        return result;
    }
}
