class Solution {
    public int maximumLength(String s) {
        int n=s.length();
        HashMap<String,Integer> map=new HashMap<>();
        // generate all special substring and store in map
        for(int i=0;i<n;i++){
            //new curString for each new i
            StringBuilder curString= new StringBuilder();
            for(int j=i;j<n;j++){
                // if curString is 0 or previous character is same then only we append and put it in map and increase its frequency
                if(curString.length()==0 || s.charAt(j)==curString.charAt(curString.length()-1)){
                    curString.append(s.charAt(j));
                    String curr=curString.toString();
                    // put it in map
                    map.put(curr, map.getOrDefault(curr,0)+1);
                }else{
                    // if not same character then break
                    break;
                }
            }
        }

        // get the maxlength of the string in map with freq >2
        int maxLen=-1;
        // we have to consider bith key and value so we take EntrySet
        for(Map.Entry<String,Integer> entry : map.entrySet()){
            String str=entry.getKey();
            int freq=entry.getValue();
            if(freq>2){
                maxLen=Math.max(maxLen, str.length());
            }
        }
        return maxLen;
    }
}
