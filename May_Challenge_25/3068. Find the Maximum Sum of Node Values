class Solution {
    public long maximumValueSum(int[] nums, int k, int[][] edges) {
        // Memoization array to store results:
        // memo[i][j]: max sum using index i with even(j=1)/odd(j=0) number of XOR operations so far
        long[][] memo = new long[nums.length][2];

        // Initialize all memo values to -1 (indicating uncomputed)
        for (long[] row : memo) {
            Arrays.fill(row, -1);
        }

        // Start from index 0 with parity = 1 (even number of XORs initially)
        return maxSumOfNodes(0, 1, nums, k, memo);
    }

    private long maxSumOfNodes(int index, int isEven, int[] nums, int k, long[][] memo) {
        // Base case: if we've considered all nodes
        if (index == nums.length) {
            // Only return 0 if number of XOR operations is even (valid result)
            // Otherwise return negative infinity (impossible state)
            return isEven == 1 ? 0 : Integer.MIN_VALUE;
        }

        // Return cached result if already computed
        if (memo[index][isEven] != -1) {
            return memo[index][isEven];
        }

        // Option 1: Don't apply XOR on current element
        long noXorDone = nums[index] + maxSumOfNodes(index + 1, isEven, nums, k, memo);

        // Option 2: Apply XOR on current element and flip parity (even â†” odd)
        long xorDone = (nums[index] ^ k) + maxSumOfNodes(index + 1, isEven ^ 1, nums, k, memo);

        // Memoize and return the maximum of both options
        return memo[index][isEven] = Math.max(xorDone, noXorDone);
    }
}
